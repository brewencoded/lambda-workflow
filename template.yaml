AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Example Application
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3
    Api:
        # enable CORS; to make more specific, change the origin wildcard
        # to a particular domain name, e.g. "'www.example.com'"
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

Parameters:
    Environment:
        Type: String

Resources:

    BookAPI:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Sub ${Environment}
            DefinitionBody:
                swagger: 2.0
                info:
                    title:
                        Ref: AWS::StackName
                x-amazon-apigateway-binary-media-types:
                    - '*/*'
                paths:
                    /api:
                        get:
                            x-amazon-apigateway-integration:
                                httpMethod: POST
                                type: aws_proxy
                                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookAPIFunction.Arn}/invocations
                            responses: {}
                            parameters:
                                -
                                    name: bookId
                                    in: path
                                    description: ID of the book
                                    required: false
                                    type: string

    BookAPIFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub BookAPIFunction-${Environment}
            CodeUri: api
            Handler: app.lambda_handler
            Runtime: nodejs8.10
            Environment:
                Variables:
                    BookTable: !Ref DynamoDBDatabase
            Events:
                BookAPIRequest:
                    Type: Api
                    Properties:
                        Path: /api
                        Method: get
                        RestApiId:
                            Ref: BookAPI
            Policies:
                - AWSLambdaBasicExecutionRole
                - AmazonDynamoDBFullAccess # Definitely don't want this for a production app

    DynamoDBDatabase:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                -
                    AttributeName: "id"
                    AttributeType: "S"
            KeySchema:
                -
                    AttributeName: "id"
                    KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: error.html

    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            PolicyDocument:
                Statement:
                    -   Sid: PublicReadForGetBucketObjects
                        Effect: Allow
                        Principal: '*'
                        Action: s3:GetObject
                        Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Bucket: !Ref S3Bucket

# Output some locations and urls for convenience
Outputs:
    WebsiteURL:
        Value: !GetAtt S3Bucket.WebsiteURL
        Description: Website URL
    ApiGWURL:
        Value: !Sub https://${BookAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api
        Description: API Gateway URL
    